import { CognitoAuth } from 'amazon-cognito-auth-js/dist/amazon-cognito-auth';
// import AWS from 'aws-sdk'
import AWS from 'aws-sdk/global';
import S3 from 'aws-sdk/clients/s3';
// import CognitoIdentityCredentials from 'aws-sdk/lib/credentials/cognito_identity_credentials';
import sigV4Client from './sigV4Client';
import config from '../config';

/**
 * Get Unauthenticated credentials from identity pool
 * @returns {shape} the auth object
 */
export async function getUnauthCredentials() {
  // if credentials already establish, do nothing
  if (AWS.config.credentials) {
    return;
  }

  const cognitoIdent = new AWS.CognitoIdentity({ region: 'ap-southeast-1' });

  // get identity id
  console.log('generate id');
  let ident = {};
  const params = {
    IdentityPoolId: config.cognito.IDENTITY_POOL_ID,
  };

  const getIdPromise = new Promise((resolve) => {
    cognitoIdent.getId(params, (err, data) => {
      console.log('ident', data);
      ident = data;
      resolve();
    });
  });

  try {
    await getIdPromise;
  } catch (e) {
    console.log('error getting id');
    console.log(e);
  }

  // generate credentials
  console.log('generate credentials from identity');
  const getCredPromise = new Promise((resolve) => {
    cognitoIdent.getCredentialsForIdentity(ident, (err, data) => {
      if (err) {
        throw err;
      }

      // save creds in AWS.config.credentials
      AWS.config.credentials = {
        accessKeyId: data.Credentials.AccessKeyId,
        secretAccessKey: data.Credentials.SecretKey,
        sessionToken: data.Credentials.SessionToken,
        expireTime: data.Credentials.Expiration,
      };
      resolve();
    });
  });
  try {
    await getCredPromise;
  } catch (e) {
    console.log('error getting creds');
    console.log(e);
  }
}

/**
 * Initialized the Cognito SDK
 * @param {null} userToken the token generated by Cognito SDK
 * @returns {shape} the auth object
 */
export async function getAwsCredentials(userToken) {
  const authenticator = `cognito-idp.ap-southeast-1.amazonaws.com/${process.env.REACT_APP_COGNITO_USER_POOL_ID}`;

  AWS.config.update({ region: 'ap-southeast-1' });

  AWS.config.credentials = new AWS.CognitoIdentityCredentials({
    // IdentityPoolId: config.cognito.IDENTITY_POOL_ID,
    IdentityPoolId: process.env.REACT_APP_COGNITO_IDENTITY_POOL_ID,
    Logins: {
      [authenticator]: userToken,
    },
  });

  return AWS.config.credentials.getPromise();
}

/**
 * Initialized the Cognito SDK
 * @param {shape} auth the Auth object
 * @returns {shape} the auth object
 */
export function setAuth(auth) {
  AWS.config.auth = auth;
}

/**
 * Initialized the Cognito SDK
 * @returns {shape} the auth object
 */
export function initCognitoSDK() {
  const authData = {
    ClientId: process.env.REACT_APP_COGNITO_APP_ID, // Your client id here
    AppWebDomain: process.env.REACT_APP_APP_WEB_DOMAIN,
    TokenScopesArray: ['email', 'openid', 'profile'],
    RedirectUriSignIn: `${window.location.protocol}//${window.location.host}/welcome`,
    RedirectUriSignOut: `${window.location.protocol}//${window.location.host}/logout`,
  };
  const auth = new CognitoAuth(authData);
  auth.useCodeGrantFlow();
  auth.userhandler = {
    /*
    onSuccess: (result) => {console.log('logged in!!')},
    onFailure: (err) => {console.log(err)}

    */
    onSuccess: async (result) => {
      // console.log("Sign in success");
      // handle.setState({currentUser:JSON.parse(atob(result.idToken.jwtToken.split('.')[1])) });
      // handle.userHasAuthenticated(true);
      // console.log('onSuccess credentials', AWS.config.credentials);
      getAwsCredentials(result.idToken.jwtToken);
      // console.log('onSuccess after getAwsCredentials', AWS.config.credentials);
      return true;
    },
    onFailure: () => false,
  };

  return auth;
}


/**
 * Authenticate a user
 * @returns {boolean} The use is authenticated or not
 */
export async function authUser() {
  console.log('authUser: check credentials exists and within expire time');
  if (
    AWS.config.credentials &&
    Date.now() < AWS.config.credentials.expireTime - 60000
  ) {
    // console.log('authUser: credentials is valid');
    return true;
  }

  console.log(`${Date.now()}: credentials expired. Refreshing them`);
  try {
    // this thing doesn't wait for token to be refreshed
    await AWS.config.auth.getSession();

    // just sleep for 2 seconds to force token update to complete
    // this solution is hacky, but works most of the time for now
    // a feature request has been posted to github calling for a callback fn
    if (Date.now() > AWS.config.credentials.expireTime - 60000) {
      await new Promise(resolve => setTimeout(resolve, 1000 * 2));
    }
    console.log(`${Date.now()}: Finish waiting`);
    return true;
  } catch (e) {
    console.log('error freshing credentials');
    console.log(e);
    return false;
  }

  /*
  // console.log('authUser: initCognitoSDK and getCurrentUser');
  console.log('authUser: initCognitoSDK');
  const auth = initCognitoSDK();
  const curUrl = window.location.href;

  auth.parseCognitoWebResponse(curUrl);
  const currentUser = auth.getCurrentUser();
  // const currentUser = getCurrentUser();

  if (currentUser === null) {
    console.log('authUser: user is null');
    return false;
  }

  // const userToken = await getUserToken(currentUser);
  console.log('authUser: getUserToken');
  const userToken = await getUserToken(auth);

  console.log(`${Date.now()}: authUser: getAwsCredentials`);
  await getAwsCredentials(userToken);
  */
}

/**
 * Authenticate a user
 * @param {object} file the file object to be uploaded
 * @returns {boolean} The use is authenticated or not
 */
export async function s3Upload(file) {
  if (!await authUser()) {
    throw new Error('User is not logged in');
  }

  const s3 = new S3({
    region: config.apiGateway.REGION,
    params: {
      Bucket: process.env.REACT_APP_S3_BUCKET,
    },
  });
  const filename = `${AWS.config.credentials.identityId}/${Date.now()}-${file.name}`;

  return s3
    .upload({
      Key: filename,
      Body: file,
      ContentType: file.type,
      ACL: 'public-read',
    })
    .promise();
}

/**
 * Authenticate a user
 * @param {object} file the file object to be uploaded
 * @returns {boolean} The use is authenticated or not
 */
export async function s3Delete(file) {
  if (!await authUser()) {
    throw new Error('User is not logged in');
  }

  if (file === '') {
    throw new Error('Empty file');
  }

  console.log(`attempt to delete ${file}`);

  const s3 = new S3({
    region: config.apiGateway.REGION,
    params: {
      Bucket: process.env.REACT_APP_S3_BUCKET,
      Key: file,
    },
  });

  return s3
    .deleteObject().promise();
}

// TODO: invoke w/o authenticated credentials for certain functions (eg. get courses info)
/**
 * Authenticate a user
 * @param {object} file the file object to be uploaded
 * @returns {shape} results the results of the api invokcation
 */
export async function invokeApig({
  path, endpoint = config.apiGateway.URL, method = 'GET', headers = {}, queryParams = {}, body,
}) {
  // check credentials
  if (!AWS.config.credentials) {
    console.log('invokeApig: credentials are empty despite await');
    throw new Error('Credentials are not detected');
  }

  // have to figure out how to make this fn to actually wait to finish
  const authUserResult = await authUser();
  if (!authUserResult) {
    throw new Error('User is not logged in');
  }

  // console.log('invokeApig: AWS.config.credentials', AWS.config.credentials);
  // console.log('invokeApig: new signedRequest');
  const signedRequest = sigV4Client
    .newClient({
      accessKey: AWS.config.credentials.accessKeyId,
      secretKey: AWS.config.credentials.secretAccessKey,
      sessionToken: AWS.config.credentials.sessionToken,
      region: config.apiGateway.REGION,
      endpoint,
    })
    .signRequest({
      method,
      path,
      headers,
      queryParams,
      body,
    });

  // body = body ? JSON.stringify(body) : body;
  headers = signedRequest.headers;
  body = body ? JSON.stringify(body) : body;

  console.log(`${Date.now()}: Requesting url ${signedRequest.url}`);
  const results = await fetch(signedRequest.url, {
    method,
    headers,
    body,
  });

  if (results.status !== 200) {
    throw new Error(await results.text());
  }

  return results.json();
}

/*
function getCurrentUser() {
  //replace this w/ something about cognito-auth-js
  // setup CognitoAuth and get current user and session??
  /*
  const userPool = new CognitoUserPool({
    UserPoolId: config.cognito.USER_POOL_ID,
    ClientId: config.cognito.APP_CLIENT_ID
  });
  return userPool.getCurrentUser();
}
*/

/*
Get Unauthenticated Credeitnails from the ID Pool
The ID pool need to enabled Unauthenticated access
async function getUnauthCredentials(){
  AWS.config.region = 'ap-southeast-1'; // Region
  AWS.config.credentials = new AWS.CognitoIdentityCredentials({
      IdentityPoolId: 'ap-southeast-1:d305ce7d-b107-480b-93cd-a4c0c9881a42'
  });
  await AWS.config.credentials.getPromise();
}
*/

/**
 * Authenticate a user
 * @param {shape} auth the auth object
 * @returns {boolean} The use is authenticated or not
  async function getUserToken(auth) {
    // replace this w/ something from cognito
    // try AWS.config.credentials.refreshPromise()
    try {
      await auth.getSession();
      if (Date.now() > AWS.config.credentials.expireTime - 6000 ||
        AWS.config.credentials.expireTime === false) {
        console.log(`${Date.now()}: session expired, force refresh`);
        const refreshPromise = new Promise((resolve) => {
          console.log(`${Date.now()}: attempt to refresh`);
          auth.refreshSession(auth.signInUserSession.refreshToken.refreshToken);
          resolve();
        });

        refreshPromise.then(() => {
          console.log(`${Date.now()}: Done refreshing;`);
        });
        /*
        try{
          //should try to wrap this  in a promise
          await auth.refreshSession(auth.signInUserSession.refreshToken.refreshToken)
          console.log('done refreshing token');
          //console.log('getUserToken: AWS.credentials', AWS.config.credentials);
          //console.log('auth.signInUserSession', auth.signInUserSession);
        } catch(e){
          console.log('error refreshing token inside getUserToken');
          console.log(e);
        }
      }
    } catch (e) {
      // console.log(e);
      return ('failed to get user session');
    }

    return auth.signInUserSession.idToken.jwtToken;
  }
*/
